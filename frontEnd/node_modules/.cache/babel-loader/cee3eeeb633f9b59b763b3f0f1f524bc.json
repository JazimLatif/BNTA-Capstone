{"ast":null,"code":"var _jsxFileName = \"/Users/jazimlatif/Desktop/BNTA/BNTA-Capstone/frontEnd/src/components/Graph.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Graph = _ref => {\n  let {\n    valuesToGraph\n  } = _ref;\n\n  // if((valuesToGraph.timeAchieved>0 || valuesToGraph.distanceAchieved>0) && valuesToGraph.setsAchieved===0 && valuesToGraph.repsAchieved===0 && valuesToGraph.weightAchieved===0){\n  //     return(\"Cardio\")\n  // }\n  // else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0) && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0 && valuesToGraph.weightAchieved===0){\n  //     return(\"Weights\")\n  // }\n  // else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0 && valuesToGraph.weightAchieved>0)  && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0) {\n  //     return(\"Calisthenics\")\n  // }\n  const x = () => {\n    if (valuesToGraph) {\n      return valuesToGraph[0].date;\n    } else {\n      /*#__PURE__*/\n      _jsxDEV(\"p\", {\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 10\n      }, this);\n    }\n  };\n\n  return x;\n};\n\n_c = Graph;\nexport default Graph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"sources":["/Users/jazimlatif/Desktop/BNTA/BNTA-Capstone/frontEnd/src/components/Graph.js"],"names":["Graph","valuesToGraph","x","date"],"mappings":";;;AAEA,MAAMA,KAAK,GAAC,QAAmB;AAAA,MAAlB;AAACC,IAAAA;AAAD,GAAkB;;AAG3B;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA,QAAMC,CAAC,GAAG,MAAK;AAAC,QAAGD,aAAH,EAAiB;AAEjC,aAAOA,aAAa,CAAC,CAAD,CAAb,CAAiBE,IAAxB;AACC,KAHe,MAIZ;AAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAe;AAAC,GAJrB;;AAKA,SAAOD,CAAP;AAMH,CA7BD;;KAAMF,K;AA+BN,eAAeA,KAAf","sourcesContent":["\n\nconst Graph=({valuesToGraph})=>{\n\n\n    // if((valuesToGraph.timeAchieved>0 || valuesToGraph.distanceAchieved>0) && valuesToGraph.setsAchieved===0 && valuesToGraph.repsAchieved===0 && valuesToGraph.weightAchieved===0){\n\n    //     return(\"Cardio\")\n\n    // }\n    // else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0) && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0 && valuesToGraph.weightAchieved===0){\n\n    //     return(\"Weights\")\n\n    // }\n    // else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0 && valuesToGraph.weightAchieved>0)  && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0) {\n\n    //     return(\"Calisthenics\")\n\n    // }\n    const x = () =>{if(valuesToGraph){\n        \n    return(valuesToGraph[0].date)\n    }\n    else{<p>Loading</p>}}\n    return(x);\n\n\n\n\n\n}\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}