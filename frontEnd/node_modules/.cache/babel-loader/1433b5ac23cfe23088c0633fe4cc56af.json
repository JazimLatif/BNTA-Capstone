{"ast":null,"code":"// import {Line} from 'react-chartjs';\n// const Graph=({valuesToGraph})=>{\n//     const renderGraph = () =>{if(valuesToGraph){\n//         if((valuesToGraph.timeAchieved>0 || valuesToGraph.distanceAchieved>0) && valuesToGraph.setsAchieved===0 && valuesToGraph.repsAchieved===0 && valuesToGraph.weightAchieved===0){\n//             data=[\n//                 {x:valuesToGraph.date,y:valuesToGraph.timeAchieved},\n//                 {},\n//                 {}\n//             ]\n//             return(\"hello\")\n//         }\n//         else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0) && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0 && valuesToGraph.weightAchieved===0){\n//             return(\"Weights\")\n//         }\n//         else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0 && valuesToGraph.weightAchieved>0)  && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0) {\n//             return(\"Calisthenics\")\n//         }\n//     }\n//     else{<p>Loading</p>}}\n//     return(renderGraph);\n// }\n// export default Graph;","map":{"version":3,"sources":["/Users/jazimlatif/Desktop/BNTA/BNTA-Capstone/frontEnd/src/components/Graph.js"],"names":[],"mappings":"AAAA;AAGA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAMA;AAEA","sourcesContent":["// import {Line} from 'react-chartjs';\n\n\n// const Graph=({valuesToGraph})=>{\n\n\n     \n\n\n//     const renderGraph = () =>{if(valuesToGraph){\n        \n//         if((valuesToGraph.timeAchieved>0 || valuesToGraph.distanceAchieved>0) && valuesToGraph.setsAchieved===0 && valuesToGraph.repsAchieved===0 && valuesToGraph.weightAchieved===0){\n\n//             data=[\n//                 {x:valuesToGraph.date,y:valuesToGraph.timeAchieved},\n//                 {},\n//                 {}\n//             ]\n    \n//             return(\"hello\")\n    \n//         }\n//         else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0) && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0 && valuesToGraph.weightAchieved===0){\n    \n//             return(\"Weights\")\n    \n//         }\n//         else if((valuesToGraph.setsAchieved>0 && valuesToGraph.repsAchieved>0 && valuesToGraph.weightAchieved>0)  && valuesToGraph.timeAchieved===0 && valuesToGraph.distanceAchieved===0) {\n    \n//             return(\"Calisthenics\")\n    \n//         }\n//     }\n//     else{<p>Loading</p>}}\n\n\n//     return(renderGraph);\n\n\n\n\n\n// }\n\n// export default Graph;\n"]},"metadata":{},"sourceType":"module"}